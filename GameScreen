package com.example.rps;

import java.util.ArrayList;
import java.util.Random;
import java.util.Set;

import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.speech.RecognizerIntent;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import android.content.BroadcastReceiver;
import android.content.IntentFilter;
import android.bluetooth.BluetoothAdapter;

public class BluetoothGameScreen extends Activity{
	static final int check =1111;
	static final String rock = "rock";
	static final String scissor = "scissors";
	static final String paper = "paper";
	static final String won = "won";
	static final String lost = "lost";
	static final String[] possibles = {"rock", "paper", "scissors"};
	String name;
	Context cntxt = this;
	Button play;
	Button score;
	BluetoothDevice device;
	private BluetoothGameService mGameService = null;
	private String mConnectedDeviceName = null;
	private BluetoothAdapter mAdapter = null;
	private boolean game_complete = false;
	
    // Message types sent from the BluetoothGameService Handler
    public static final int MESSAGE_STATE_CHANGE = 1;
    public static final int MESSAGE_READ = 2;
    public static final int MESSAGE_WRITE = 3;
    public static final int MESSAGE_DEVICE_NAME = 4;
    public static final int MESSAGE_TOAST = 5;
    public static final String DEVICE_NAME = "device_name";
    public static final String TOAST = "toast";
    
	private static int writecount=0;
	private static int readcount=0;
	private static String result="";
	private static String readstring="";
	private static String writestring="";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_game_play_screen);
		
		name = getIntent().getStringExtra("user");
		device = getIntent().getParcelableExtra("device");		
		
		TextView txtlabel = (TextView)findViewById(R.id.textlabl);
		txtlabel.setText("Welcome " + name);
		
		mGameService = new BluetoothGameService(this, mHandler);
		mGameService.connect(device);
		
		
		play = (Button)findViewById(R.id.play);
		play.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent i = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
				i.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
				startActivityForResult(i, check);
				
			}
		});
		
		score = (Button)findViewById(R.id.score);
		score.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View va) {
				// TODO Auto-generated method stub
				DatabaseOperations DBP = new DatabaseOperations(cntxt);
				
				Cursor cursor = DBP.retSpcfInfo(DBP, name);
				cursor.moveToFirst();
				int show_win = cursor.getInt(0);
				int show_loss = cursor.getInt(1);
				
				Toast.makeText(getApplicationContext(), "Won = "+ show_win + " and lost = " + show_loss, Toast.LENGTH_SHORT).show();
				
			}
		});
		
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		String send = "";		
		game_complete = false;
		
		if(requestCode == check && resultCode == RESULT_OK){
			ArrayList<String> results = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
			boolean check = false;
			if( results.contains(rock)){
				send = rock;
				check = true;
			}else if (results.contains(paper)){
				send = paper;
				check = true;
			}else if (results.contains(scissor)){
				send = scissor;
				check = true;
			}	
									
			if (check == false){
				Toast.makeText(getApplicationContext(), "please try again", Toast.LENGTH_SHORT).show();
			}else{
				sendMessage(send);							
			}
			
			
		}
		
		super.onActivityResult(requestCode, resultCode, data);
		
	}
	
	private void UpdateDataBase(String winorloss)
	{
		int win_cnt = 0;
		int los_cnt = 0;
		DatabaseOperations DOP = new DatabaseOperations(cntxt);
		
		try{
			Cursor cursor = DOP.retSpcfInfo(DOP, name);
			cursor.moveToFirst();
			win_cnt = cursor.getInt(0);
			los_cnt = cursor.getInt(1);
		}catch (Exception ex){
			Log.d("Error", ex.getMessage());
		}						
		
		DatabaseOperations DP = new DatabaseOperations(cntxt);
		
		if (winorloss.equals(won)){
			win_cnt = win_cnt + 1;
			DP.updateWinInfo(DP, name, win_cnt);
			
		}else if (winorloss.equals(lost)){
			los_cnt = los_cnt + 1;
			DP.updateLossInfo(DP, name, los_cnt);
		}
		
	}
	
	private String detwinner(String user_input, String comp_input){
		String win_lost = "";
		
		if (user_input.equals(rock) && comp_input.equals(scissor)){
			win_lost = "won";
		}
		if (user_input.equals(rock) && comp_input.equals(paper)){
			win_lost = "lost";
		}
		if (user_input.equals(scissor) && comp_input.equals(rock)){
			win_lost = "lost";
		}
		if (user_input.equals(scissor) && comp_input.equals(paper)){
			win_lost = "won";
		}
		if (user_input.equals(paper) && comp_input.equals(rock)){
			win_lost = "won";
		}
		if (user_input.equals(paper) && comp_input.equals(scissor)){
			win_lost = "lost";
		}
		if (user_input.equals(comp_input)){
			win_lost = "draw";
		}
		
		return win_lost;
		
	}
	
    private void sendMessage(String message) {
        // Check that we're actually connected before trying anything
        if (mGameService.getState() != BluetoothGameService.STATE_CONNECTED) {
            //Toast.makeText(this, R.string.not_connected, Toast.LENGTH_SHORT).show();
        	Toast.makeText(this, "Not Connected", Toast.LENGTH_SHORT).show();
            return;
        }
        // Check that there's actually something to send
        if (message.length() > 0) {
            // Get the message bytes and tell the BluetoothChatService to write
            byte[] send = message.getBytes();
            mGameService.write(send);
        }
    }
	
	// The Handler that gets information back from the BluetoothChatService
	private final Handler mHandler = new Handler() {
	    @Override
	    public void handleMessage(Message msg) {
	        switch (msg.what) {
	        case MESSAGE_STATE_CHANGE:
	            switch (msg.arg1) {
	            case BluetoothGameService.STATE_CONNECTED:
	                break;
	            case BluetoothGameService.STATE_CONNECTING:
	                break;
	            case BluetoothGameService.STATE_LISTEN:
	            	break;
	            case BluetoothGameService.STATE_NONE:
	                break;
	            }
	            break;
	        case MESSAGE_WRITE:
            	writecount++;
            	
            	byte[] writeBuf = (byte[]) msg.obj;
                // construct a string from the buffer
                String writeMessage = new String(writeBuf);
               
                if (writeMessage.equals("Exited")){
                	
                }
                else{
                	Toast.makeText(getApplicationContext(), "You played "
                			+ writeMessage, Toast.LENGTH_SHORT).show();
                    writestring=writeMessage;
                    	if(readcount==1)
                    	{
                    		result=detwinner(writestring, readstring);
                    		Toast.makeText(getApplicationContext(), "Opponent Played "+ readstring + " You " + result
                    				, Toast.LENGTH_SHORT).show();
                    		UpdateDataBase(result);              
                    		game_complete = true;
                    		readcount=0;
                    		writecount=0;
                    		writestring="";
                    		readstring="";
                    		GameExit(game_complete);
                    	}
                }
                                        	                
                break;
	        case MESSAGE_READ:
	        	readcount++;
            	
            	byte[] readBuf = (byte[]) msg.obj;            	
                // construct a string from the valid bytes in the buffer
            	String readMessage = new String(readBuf, 0, msg.arg1);
            	if (readMessage.equals("Exited"))
            	{
            		Toast.makeText(getApplicationContext(), "Opponent Left"
                            , Toast.LENGTH_LONG).show();
            	}else{
            		readstring=readMessage;
                	if(readcount==1 && writecount!=1){Toast.makeText(getApplicationContext(), "Your turn"
                                  , Toast.LENGTH_SHORT).show();  }
                	if(writecount==1)
                	{
                		result=detwinner(writestring, readstring);
                		Toast.makeText(getApplicationContext(), "Opponent Played "+ readstring + " You " + result 
                                , Toast.LENGTH_SHORT).show();
                		UpdateDataBase(result);
                		game_complete = true;
                    	writecount=0;
                    	readcount=0;
                    	readstring="";
                    	writestring="";
                    	GameExit(game_complete);
                	}
            	}
            	
                break;
	        case MESSAGE_DEVICE_NAME:
	            // save the connected device's name
	            mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
	            Toast.makeText(getApplicationContext(), "Connected to "
	                           + mConnectedDeviceName, Toast.LENGTH_SHORT).show();
	            break;
	        case MESSAGE_TOAST:
	            Toast.makeText(getApplicationContext(), msg.getData().getString(TOAST),
	                           Toast.LENGTH_SHORT).show();
	            break;
	        }
	    }
	};
	
	private void GameExit(boolean game_check){
		if (game_check == true){
			mAdapter = BluetoothAdapter.getDefaultAdapter();
			AlertDialog.Builder gamecontinue = new AlertDialog.Builder(cntxt);
			gamecontinue.setMessage("Want to Play Again?")
						.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
							
							@Override
							public void onClick(DialogInterface dialog, int which) {
								// TODO Auto-generated method stub
								
							}
						})
						.setNegativeButton("No", new DialogInterface.OnClickListener() {
							
							@Override
							public void onClick(DialogInterface dialog, int which) {
								// TODO Auto-generated method stub									
								String exit_message = "Exited";
								sendMessage(exit_message);
								mAdapter.disable();
								finish();
							}
						});
			AlertDialog alertDialog = gamecontinue.create();
			alertDialog.show();
		}
	}
	
}
